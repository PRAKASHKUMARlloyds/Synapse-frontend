[
  {
    "id": 1,
    "question": "What is Node.js?",
    "answer": "Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a browser.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 2,
    "question": "Which module in Node.js is used to create a server?",
    "answer": "The 'http' module is used to create a server in Node.js.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 3,
    "question": "What is npm?",
    "answer": "npm is the package manager for Node.js used to install, update, and manage packages.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 4,
    "question": "What is the purpose of the 'fs' module in Node.js?",
    "answer": "The 'fs' module is used to interact with the file system in Node.js.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 5,
    "question": "What does the 'require' function do in Node.js?",
    "answer": "The 'require' function is used to import modules in Node.js.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 6,
    "question": "Which command is used to initialize a new Node.js project?",
    "answer": "The command 'npm init' is used to initialize a new project.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 7,
    "question": "How do you read a file synchronously in Node.js?",
    "answer": "Using 'fs.readFileSync(path)' from the 'fs' module.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 8,
    "question": "What is the default file name that Node.js looks for when requiring a folder?",
    "answer": "Node.js looks for 'index.js' by default.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 9,
    "question": "How do you handle exceptions in Node.js?",
    "answer": "You can use try/catch blocks and error-first callbacks.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },
  {
    "id": 10,
    "question": "What does 'process' refer to in Node.js?",
    "answer": "'process' is a global object that provides information and control over the current Node.js process.",
    "category": "nodejs",
    "difficulty": "Beginner"
  },

  {
    "id": 11,
    "question": "What is middleware in Express.js?",
    "answer": "Middleware functions are functions that have access to the request, response, and next middleware in the request-response cycle.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 12,
    "question": "How can you serve static files using Express.js?",
    "answer": "By using express.static() middleware.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 13,
    "question": "What is the role of 'next()' in middleware?",
    "answer": "'next()' passes control to the next middleware function.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 14,
    "question": "What is the use of the 'path' module in Node.js?",
    "answer": "The 'path' module provides utilities for working with file and directory paths.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 15,
    "question": "How do you create a REST API using Express.js?",
    "answer": "By setting up routes using app.get(), app.post(), app.put(), and app.delete().",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 16,
    "question": "How is asynchronous behavior handled in Node.js?",
    "answer": "Using callbacks, Promises, or async/await.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 17,
    "question": "What is a stream in Node.js?",
    "answer": "A stream is an abstract interface for working with streaming data in Node.js.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 18,
    "question": "What is cluster module used for?",
    "answer": "To create child processes to take advantage of multi-core systems.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 19,
    "question": "What are environment variables in Node.js?",
    "answer": "Environment variables are values that can be accessed via process.env and used to configure the application.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },
  {
    "id": 20,
    "question": "How do you parse JSON data in Node.js?",
    "answer": "Using JSON.parse() method.",
    "category": "nodejs",
    "difficulty": "Intermediate"
  },

  {
    "id": 21,
    "question": "What is event loop in Node.js?",
    "answer": "The event loop handles asynchronous callbacks in Node.js and allows non-blocking I/O.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 22,
    "question": "Explain process.nextTick() in Node.js.",
    "answer": "It defers the execution of a function until the next pass of the event loop.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 23,
    "question": "How do you handle uncaught exceptions in Node.js?",
    "answer": "By listening to the 'uncaughtException' event on the process object.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 24,
    "question": "What is the difference between spawn and exec in child_process module?",
    "answer": "'spawn' is used for streaming large amounts of data, while 'exec' buffers the output.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 25,
    "question": "What is the purpose of buffer in Node.js?",
    "answer": "Buffers handle binary data directly in memory.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 26,
    "question": "What are worker threads in Node.js?",
    "answer": "Worker threads allow running JavaScript in parallel on multiple threads.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 27,
    "question": "Explain the concept of backpressure in streams.",
    "answer": "Backpressure occurs when the readable stream sends data faster than the writable stream can consume.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 28,
    "question": "How do you implement rate limiting in an Express.js app?",
    "answer": "Using middleware like 'express-rate-limit' to control the number of requests.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 29,
    "question": "What is the purpose of the VM module in Node.js?",
    "answer": "The VM module is used to compile and run code within V8 Virtual Machine contexts.",
    "category": "nodejs",
    "difficulty": "Advanced"
  },
  {
    "id": 30,
    "question": "What are the advantages of using async/await over Promises?",
    "answer": "It makes asynchronous code easier to read and write by avoiding nested Promises.",
    "category": "nodejs",
    "difficulty": "Advanced"
  }
]
