[
  {
    "id": 1,
    "question": "What is the difference between var, let, and const in JavaScript?",
    "answer": "`var` is function-scoped, while `let` and `const` are block-scoped. `const` also creates a read-only reference to a value.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 2,
    "question": "What are JavaScript data types?",
    "answer": "String, Number, BigInt, Boolean, Undefined, Null, Symbol, and Object.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 3,
    "question": "What is the use of isNaN function?",
    "answer": "`isNaN()` determines whether a value is NaN (Not a Number).",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 4,
    "question": "How can you convert a string to an integer in JavaScript?",
    "answer": "Using `parseInt()`, `Number()`, or unary `+` operator.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 5,
    "question": "What is the difference between '==' and '==='?",
    "answer": "`==` checks for value equality with type coercion, `===` checks for both value and type equality.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 6,
    "question": "What is a closure in JavaScript?",
    "answer": "A closure is a function that has access to its outer function scope even after the outer function has returned.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 7,
    "question": "What is the purpose of the 'this' keyword in JavaScript?",
    "answer": "`this` refers to the object that is executing the current function.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 8,
    "question": "How do you create an array in JavaScript?",
    "answer": "Using `[]` or `new Array()`.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 9,
    "question": "What is the use of the typeof operator?",
    "answer": "`typeof` returns a string indicating the type of a variable.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 10,
    "question": "How do you define a function in JavaScript?",
    "answer": "Using the `function` keyword, or with arrow function syntax `()=>{}`.",
    "category": "js",
    "difficulty": "Beginner"
  },
  {
    "id": 11,
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting is JavaScript's default behavior of moving declarations to the top.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 12,
    "question": "What is the difference between null and undefined?",
    "answer": "`null` is an assigned value representing no value. `undefined` means a variable has been declared but not assigned a value.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 13,
    "question": "Explain event delegation in JavaScript.",
    "answer": "Event delegation is a technique of handling events at a higher level in the DOM rather than at the level of individual elements.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 14,
    "question": "What are arrow functions?",
    "answer": "Arrow functions are a shorter syntax for writing functions and they don't have their own `this`.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 15,
    "question": "What is the difference between call, apply, and bind?",
    "answer": "`call()` and `apply()` invoke a function with a given `this` value. `bind()` returns a new function with `this` bound.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 16,
    "question": "What is a promise in JavaScript?",
    "answer": "A Promise is an object representing the eventual completion or failure of an asynchronous operation.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 17,
    "question": "What is the event loop in JavaScript?",
    "answer": "The event loop handles execution of multiple chunks of code in the browser, including handling asynchronous events.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 18,
    "question": "What are template literals?",
    "answer": "Template literals are enclosed by backticks and allow embedded expressions using `${}`.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 19,
    "question": "What are JavaScript modules?",
    "answer": "Modules are files that export and import values or functions between JavaScript files.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 20,
    "question": "How does the 'spread' operator work?",
    "answer": "The spread operator `...` expands iterable elements into individual elements.",
    "category": "js",
    "difficulty": "Intermediate"
  },
  {
    "id": 21,
    "question": "What is the difference between synchronous and asynchronous code?",
    "answer": "Synchronous code is executed line by line. Asynchronous code runs in parallel and uses callbacks/promises to handle results.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 22,
    "question": "What is memoization in JavaScript?",
    "answer": "Memoization is an optimization technique to cache previously computed results for faster access.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 23,
    "question": "Explain the concept of currying.",
    "answer": "Currying is a technique of evaluating functions with multiple arguments as a sequence of functions with single arguments.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 24,
    "question": "What is a generator function?",
    "answer": "A generator function is a function that can be paused and resumed using the `yield` keyword.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 25,
    "question": "What is a WeakMap in JavaScript?",
    "answer": "`WeakMap` is a collection of key/value pairs where keys are weakly referenced objects.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 26,
    "question": "Explain debounce and throttle in JavaScript.",
    "answer": "Debounce delays function execution until after a pause. Throttle limits how often a function executes over time.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 27,
    "question": "How does async/await work?",
    "answer": "`async/await` syntax allows writing asynchronous code in a synchronous manner using Promises under the hood.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 28,
    "question": "What are proxies in JavaScript?",
    "answer": "`Proxy` objects allow customization of fundamental operations on objects like property lookup, assignment, enumeration, etc.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 29,
    "question": "What are the different ways to deep clone an object?",
    "answer": "Using `structuredClone()`, `JSON.parse(JSON.stringify(obj))`, or recursive functions.",
    "category": "js",
    "difficulty": "Advanced"
  },
  {
    "id": 30,
    "question": "What is the Temporal API in JavaScript?",
    "answer": "Temporal is a new API for working with dates and times in a more reliable and powerful way than `Date`.",
    "category": "js",
    "difficulty": "Advanced"
  }
]
